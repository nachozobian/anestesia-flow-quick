import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { AlertTriangle, CheckCircle, Clock, FileText, Loader2 } from 'lucide-react';

interface Recommendation {
  id: string;
  category: string;
  title: string;
  description: string;
  priority: 'high' | 'medium' | 'low';
  created_at: string;
}

interface RecommendationsViewProps {
  patientId: string;
  onContinue: () => void;
}

const RecommendationsView = ({ patientId, onContinue }: RecommendationsViewProps) => {
  const [recommendations, setRecommendations] = useState<Recommendation[]>([]);
  const [loading, setLoading] = useState(true);
  const [generating, setGenerating] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    loadRecommendations();
  }, [patientId]);

  const loadRecommendations = async () => {
    try {
      // Use secure function to get recommendations (patientId is now the token)
      const { data, error } = await supabase
        .rpc('get_patient_recommendations_by_token', { patient_token: patientId });

      if (error) {
        console.error('Error loading recommendations:', error);
        // If we can't load recommendations, generate them
        generateRecommendations();
        return;
      }

      if (!data || data.length === 0) {
        // Generate recommendations if none exist
        await generateRecommendations();
      } else {
        setRecommendations(data as Recommendation[]);
      }
    } catch (error) {
      console.error('Error loading recommendations:', error);
      // If there's an error, try to generate recommendations
      await generateRecommendations();
    } finally {
      setLoading(false);
    }
  };

  const generateRecommendations = async () => {
    setGenerating(true);
    try {
      // patientId is now the token, so we can use it directly
      const token = patientId;

      // Get patient data, responses, and conversation using secure functions
      const [patientResult, responsesResult, conversationResult] = await Promise.all([
        supabase.rpc('get_patient_by_token', { patient_token: token }),
        supabase.rpc('get_patient_responses_by_token', { patient_token: token }),
        supabase.rpc('get_patient_conversations_by_token', { patient_token: token })
      ]);

      const patient = patientResult.data?.[0];
      const responses = responsesResult.data?.[0];
      const conversation = conversationResult.data || [];

      if (!patient) {
        throw new Error('Patient data not found');
      }

      // Create conversation history for context
      const conversationHistory = conversation.map((msg: any) => ({
        role: msg.role,
        content: msg.content
      }));

      // Generate recommendations using OpenAI
      const { data: aiResponse, error: aiError } = await supabase.functions.invoke('openai-chat', {
        body: {
          message: "Basándome en toda la información recopilada durante nuestra evaluación preanestésica, por favor genera recomendaciones médicas específicas para este paciente.",
          patientData: patient,
          conversationHistory: conversationHistory
        }
      });

      if (aiError) {
        console.error('AI Error:', aiError);
        throw aiError;
      }

      // Check if recommendations were generated by the AI
      if (aiResponse.recommendations_generated && aiResponse.recommendations) {
        // Use the recommendations directly from the AI response
        setRecommendations(aiResponse.recommendations as Recommendation[]);
        
        toast({
          title: "Recomendaciones generadas",
          description: "Se han generado sus recomendaciones personalizadas.",
        });
      } else {
        // If no recommendations were generated automatically, show error
        toast({
          title: "Error",
          description: "No se pudieron generar recomendaciones. La conversación con la IA parece estar incompleta.",
          variant: "destructive"
        });
      }

    } catch (error) {
      console.error('Error generating recommendations:', error);
      toast({
        title: "Error",
        description: "Error al generar recomendaciones. Intente nuevamente.",
        variant: "destructive"
      });
    } finally {
      setGenerating(false);
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'high':
        return <AlertTriangle className="h-4 w-4 text-destructive" />;
      case 'medium':
        return <Clock className="h-4 w-4 text-warning" />;
      case 'low':
        return <CheckCircle className="h-4 w-4 text-success" />;
      default:
        return <FileText className="h-4 w-4" />;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'destructive';
      case 'medium':
        return 'default';
      case 'low':
        return 'secondary';
      default:
        return 'outline';
    }
  };

  const getPriorityLabel = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'Alta Prioridad';
      case 'medium':
        return 'Prioridad Media';
      case 'low':
        return 'Baja Prioridad';
      default:
        return priority;
    }
  };

  if (loading || generating) {
    return (
      <Card className="w-full">
        <CardContent className="flex flex-col items-center justify-center py-12">
          <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
          <p className="text-sm text-muted-foreground">
            {generating ? 'Generando recomendaciones personalizadas...' : 'Cargando recomendaciones...'}
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <FileText className="h-5 w-5 text-primary" />
            <span>Recomendaciones Pre-Operatorias</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-muted-foreground mb-6">
            Basándose en su información médica y la consulta con IA, estas son sus recomendaciones personalizadas para antes de la cirugía:
          </p>
          
          <div className="space-y-4">
            {recommendations.map((recommendation) => (
              <Card key={recommendation.id} className="border-l-4 border-l-primary/20">
                <CardContent className="p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center space-x-2">
                      {getPriorityIcon(recommendation.priority)}
                      <h4 className="font-semibold text-sm">{recommendation.title}</h4>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline" className="text-xs">
                        {recommendation.category}
                      </Badge>
                      <Badge 
                        variant={getPriorityColor(recommendation.priority) as any} 
                        className="text-xs"
                      >
                        {getPriorityLabel(recommendation.priority)}
                      </Badge>
                    </div>
                  </div>
                  <p className="text-sm text-muted-foreground">
                    {recommendation.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>

          {recommendations.length === 0 && (
            <div className="text-center py-8">
              <p className="text-sm text-muted-foreground mb-4">
                No se encontraron recomendaciones. 
              </p>
              <Button onClick={generateRecommendations} disabled={generating}>
                {generating ? (
                  <>
                    <Loader2 className="h-4 w-4 animate-spin mr-2" />
                    Generando...
                  </>
                ) : (
                  'Generar Recomendaciones'
                )}
              </Button>
            </div>
          )}
        </CardContent>
      </Card>

      <div className="flex justify-end">
        <Button onClick={onContinue} className="px-8">
          Continuar al Consentimiento
        </Button>
      </div>
    </div>
  );
};

export default RecommendationsView;