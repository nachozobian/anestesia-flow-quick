import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, patientData, conversationHistory = [], patientToken } = await req.json();
    
    if (!message) {
      throw new Error('Message is required');
    }

    // Initialize Supabase client with service role key for database operations
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Get patient ID from token for secure operations
    let actualPatientId = patientData?.id;
    if (patientToken) {
      const { data: tokenResult } = await supabase.rpc('get_patient_id_from_token', { 
        patient_token: patientToken 
      });
      actualPatientId = tokenResult;
    }

    // Get patient medical responses for additional context
    let patientResponses = null;
    if (actualPatientId) {
      const { data } = await supabase
        .from('patient_responses')
        .select('*')
        .eq('patient_id', actualPatientId)
        .single();
      
      patientResponses = data;
    }

    // Get OpenAI API key
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OpenAI API key not configured');
    }

    // Prepare context for medical consultation
    const systemPrompt = `üß† PROMPT DE SISTEMA ‚Äì MODELO DE VALORACI√ìN PREOPERATORIA

Eres un agente conversacional m√©dico especializado en valoraci√≥n preoperatoria, encargado de realizar entrevistas cl√≠nicas estructuradas y generar recomendaciones adaptadas al procedimiento y a las condiciones del paciente.

Debes realizar preguntas una a una, de forma clara, sin agobiar al paciente, y permitiendo volver a puntos anteriores si es necesario.
Recoge toda la informaci√≥n de forma ordenada y genera un informe final claro, con alertas autom√°ticas si procede.

üîπ 1. REGISTRO INICIAL DEL PACIENTE
- Edad
- Peso: Si no lo sabe: decirle que se pese y lo traiga anotado. Puede hacerlo en casa o en una farmacia. Tambi√©n puede introducir el dato en el enlace recibido (vigente 12 h).
- Talla: Si no la sabe: indicarle que se mida y lo traiga apuntado o lo a√±ada al enlace en las siguientes 12 h.
- Tipo de cirug√≠a o procedimiento: Si no lo sabe: usar la tabla de datos para proponer (ej. "parece que es una hernia"). Si lo sabe: verificar localizaci√≥n y lateralidad (ej. "¬øhernia derecha o izquierda?", "¬øqu√© rodilla?").

üîπ 2. ALERGIAS
Preguntar por alergias a medicamentos, alimentos o agentes ambientales.
Si tiene alergia a alg√∫n f√°rmaco, registrar el principio activo en MAY√öSCULAS en el informe.
Si es al√©rgico al l√°tex:
- Preguntar por s√≠ntomas (edema de glotis, dificultad respiratoria, lesiones cut√°neas, etc.).
- Preguntar si est√° estudiado por Alergolog√≠a.
- Indicar que debe programarse como primer caso del d√≠a en quir√≥fano libre de l√°tex.
- Solicitar que traiga informe o una foto del mismo.

üîπ 3. ANTECEDENTES PERSONALES
Siempre permitir respuestas adicionales: Al final de este bloque, preguntar: "¬øSe le ocurre algo m√°s?", "¬øRecuerda alguna otra enfermedad importante?"

Patolog√≠as dirigidas:
Cardiopat√≠a:
- Si ha tenido infarto: Fecha aproximada, ¬øStents? (muelles), √öltima revisi√≥n por Cardiolog√≠a (v√°lida si <12 meses), ¬øInforme disponible? ‚Üí traerlo o mostrarlo, ¬øDolor tor√°cico con esfuerzo? ¬øDisnea?, ¬øPuede subir una planta de escaleras?, ¬øAlg√∫n ingreso por tema card√≠aco?
- Marcar como ALERTA para valoraci√≥n estricta.
- Si tiene stents, m√°s adelante preguntar por antiagregaci√≥n.

Enfermedad respiratoria (EPOC, asma, SAOS):
- ¬øHa tenido ingresos?, ¬øUsa ox√≠geno domiciliario?, ¬øUsa CPAP/BiPAP? Si tiene ingreso: debe traer el equipo al hospital, ¬øUsa inhaladores?, ¬øCu√°les? (ej. Ventolin, Symbicort‚Ä¶)
- Indicar: Usarlos seg√∫n horario habitual, Si es salbutamol/Ventolin ‚Üí usar 30 minutos antes de la intervenci√≥n

Diabetes:
- ¬øToma pastillas o insulina?
- Si insulina: Tipo (r√°pida/lenta), ¬øDosis?, ¬øCu√°ndo la usa (ma√±ana o noche)?
- Si la usa por la noche ‚Üí dosis habitual, Si es por la ma√±ana ‚Üí solo la mitad de la dosis
- Metformina: suspender el d√≠a de la cirug√≠a.
- GLP-1 (semaglutida, liraglutida, etc.): Suspender al menos 7 d√≠as antes, Si no se ha cumplido ‚Üí reprogramar cirug√≠a, Marcar como ALERTA por riesgo de broncoaspiraci√≥n
- Glifozinas (iSGLT2): suspender 24‚Äì48 h antes
- Hipoglucemia: indicar que debe tomar medio vaso de agua con dos sobres o 2 cucharadas de az√∫car y avisar.

HTA:
- Medicaci√≥n: puede tomarse hasta 2 h antes con un sorbo de agua.
- Betabloqueantes y antagonistas del calcio: mantener el d√≠a de la cirug√≠a.

Insuficiencia renal:
- ¬øEst√° en di√°lisis? ¬øCreatinina alta?
- Marcar como paciente de riesgo
- En anticoagulantes de acci√≥n directa, sumar 1 d√≠a m√°s de suspensi√≥n y crear ALERTA para revisi√≥n por el administrador.

üîπ 4. ANTECEDENTES QUIR√öRGICOS
Preguntar: ¬øSe ha operado alguna vez? ¬øLe han puesto sedaci√≥n?
- ¬øQu√© tipo de intervenci√≥n fue? Si no lo recuerda ‚Üí "¬øEn qu√© parte del cuerpo fue?" Ofrecer ejemplos para ayudarle a identificarla.
- ¬øTuvo complicaciones con la anestesia?
- Marcar como riesgo o incidente grave si: Parada, dificultad de intubaci√≥n, despertar intraoperatorio, retraso en despertar
- Tambi√©n recoger: n√°useas, v√≥mitos postoperatorios
- Preguntar: "¬øSe acuerda de alguna otra operaci√≥n o procedimiento m√°s?"

üîπ 5. TRATAMIENTO HABITUAL
¬øToma alg√∫n medicamento?
- Registrar nombre y motivo.
- Detectar f√°rmacos clave autom√°ticamente: Antidiab√©ticos, Antiagregantes, Anticoagulantes, Hipotensores
- Siempre permitir a√±adir m√°s: "¬øRecuerda alguno m√°s?"

üîπ 6. PLAN Y RECOMENDACIONES PREOPERATORIAS
Ayuno:
- Bajo riesgo: 6 h sin comida (ligera y sin grasa), L√≠quidos claros hasta 2 h antes
- Alto riesgo (obesos, diab√©ticos mal controlados, IR, broncoaspiraci√≥n previa, etc.): Ayuno completo de al menos 8 h

Consentimiento informado: Entregarlo solo despu√©s de dar todas las recomendaciones.

Alertas en el informe final:
- Broncoaspiraci√≥n por GLP-1
- Antecedentes card√≠acos ‚Üí valoraci√≥n estricta
- Insuficiencia renal ‚Üí ajustar anticoagulantes
- Antecedentes anest√©sicos graves
- Alergia a l√°tex
- Uso de anticoagulantes o antiagregantes ‚Üí notificaci√≥n autom√°tica al administrador

INFORMACI√ìN DEL PACIENTE ACTUAL:
- Nombre: ${patientData?.name || 'No disponible'}
- Procedimiento: ${patientData?.procedure || 'No especificado'}
- Fecha del procedimiento: ${patientData?.procedure_date || 'No especificada'}
- DNI: ${patientData?.dni || 'No disponible'}

${patientResponses ? `
INFORMACI√ìN M√âDICA PREVIA DEL FORMULARIO:
- Alergias: ${patientResponses.has_allergies ? (patientResponses.allergies || 'S√≠, pero no especificadas') : 'No'}
- Medicamentos actuales: ${patientResponses.current_medications || 'No especificados'}
- Historia m√©dica: ${patientResponses.medical_history || 'No especificada'}
- Cirug√≠as previas: ${patientResponses.previous_surgeries || 'No especificadas'}
- Historia familiar: ${patientResponses.family_history || 'No especificada'}
- Fumador: ${patientResponses.smoking ? 'S√≠' : 'No'}
- Consumo de alcohol: ${patientResponses.alcohol ? 'S√≠' : 'No'}
- Ejercicio: ${patientResponses.exercise || 'No especificado'}
- Dieta: ${patientResponses.diet || 'No especificada'}
- Horas de sue√±o: ${patientResponses.sleep_hours || 'No especificado'}
- Nivel de estr√©s (1-10): ${patientResponses.stress_level || 'No especificado'}
- Preocupaciones adicionales: ${patientResponses.additional_concerns || 'Ninguna'}
- Contacto de emergencia: ${patientResponses.emergency_contact_name || 'No especificado'}
` : ''}

IMPORTANTE: Sigue la estructura paso a paso, haz UNA PREGUNTA A LA VEZ de forma clara y emp√°tica. Al completar la evaluaci√≥n, genera recomendaciones m√©dicas espec√≠ficas usando la funci√≥n 'generate_recommendations'.`;

    // Build conversation messages
    const messages = [
      { 
        role: 'system', 
        content: systemPrompt 
      },
      ...conversationHistory.map((msg: any) => ({
        role: msg.role === 'user' ? 'user' : 'assistant',
        content: msg.content
      })),
      { 
        role: 'user', 
        content: message 
      }
    ];

    console.log('Calling OpenAI with patient context:', { 
      patientId: patientData?.id, 
      hasResponses: !!patientResponses 
    });

    // Make the request to OpenAI
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        temperature: 0.7,
        max_tokens: 1000,
        tools: [
          {
            type: 'function',
            function: {
              name: 'generate_recommendations',
              description: 'Genera recomendaciones m√©dicas espec√≠ficas basadas en la evaluaci√≥n preanest√©sica del paciente',
              parameters: {
                type: 'object',
                properties: {
                  recommendations: {
                    type: 'array',
                    items: {
                      type: 'object',
                      properties: {
                        title: { type: 'string', description: 'T√≠tulo de la recomendaci√≥n' },
                        description: { type: 'string', description: 'Descripci√≥n detallada de la recomendaci√≥n' },
                        category: { 
                          type: 'string', 
                          enum: ['preoperatorio', 'anestesia', 'medicamentos', 'riesgo', 'seguimiento'],
                          description: 'Categor√≠a de la recomendaci√≥n' 
                        },
                        priority: { 
                          type: 'string', 
                          enum: ['high', 'medium', 'low'],
                          description: 'Prioridad de la recomendaci√≥n (high, medium, low)' 
                        }
                      },
                      required: ['title', 'description', 'category', 'priority']
                    }
                  }
                },
                required: ['recommendations']
              }
            }
          }
        ],
        tool_choice: 'auto'
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('OpenAI API error:', errorText);
      throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log('OpenAI response:', result);

    // Check if the AI wants to call the function to generate recommendations
    const choice = result.choices[0];
    if (choice.message.tool_calls && choice.message.tool_calls.length > 0) {
      const toolCall = choice.message.tool_calls[0];
      if (toolCall.function.name === 'generate_recommendations') {
        try {
          const recommendationsData = JSON.parse(toolCall.function.arguments);
          
          // Save recommendations to database using the actual patient ID
          if (actualPatientId && recommendationsData.recommendations) {
            const recommendationsToInsert = recommendationsData.recommendations.map((rec: any) => ({
              patient_id: actualPatientId,
              title: rec.title,
              description: rec.description,
              category: rec.category,
              priority: rec.priority
            }));

            const { error: insertError } = await supabase
              .from('patient_recommendations')
              .insert(recommendationsToInsert);

            if (insertError) {
              console.error('Error saving recommendations:', insertError);
            } else {
              console.log('Recommendations saved successfully');
            }
          }

          return new Response(
            JSON.stringify({ 
              response: "He generado las recomendaciones m√©dicas basadas en nuestra evaluaci√≥n. Puede revisarlas en la siguiente secci√≥n. ¬øTiene alguna pregunta adicional sobre el procedimiento o las recomendaciones?",
              success: true,
              recommendations_generated: true,
              recommendations: recommendationsData.recommendations || []
            }),
            { 
              headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
            }
          );
        } catch (parseError) {
          console.error('Error parsing recommendations:', parseError);
        }
      }
    }

    // Extract the regular response content
    const aiResponse = choice.message.content || 'No se pudo generar una respuesta';

    return new Response(
      JSON.stringify({ 
        response: aiResponse,
        success: true 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Error in openai-chat function:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message,
        success: false 
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});